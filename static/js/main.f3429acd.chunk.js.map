{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["INPUTS","name","symbol","OPERATOR","SINGLE_INPUT_LAYOUT","BTN_STYLE","Display","id","className","this","props","currentString","currentInput","React","Component","SingleInput","userInputEng","styleSet","onClick","handleInput","userInput","SingleOperator","operator","Calculate","handleCalculate","Cleaner","handleCleaner","App","state","operators","result","bind","event","target","innerText","setState","concat","test","length","slice","indexOf","raw","split","i","sumResult","newCal","join","j","includes","subNum","map","item","Number","cal","match","mediaResult","n","toString","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3429acd.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nconst INPUTS = [{name: \"zero\", symbol: 0}, \n{name: \"one\", symbol: 1}, \n{name: \"two\", symbol: 2}, \n{name: \"three\", symbol: 3}, \n{name: \"four\", symbol: 4}, \n{name: \"five\", symbol: 5}, \n{name: \"six\", symbol: 6}, \n{name: \"seven\", symbol: 7}, \n{name: \"eight\", symbol: 8}, \n{name: \"nine\", symbol: 9},\n{name: \"decimal\", symbol: \".\"}];\n\nconst OPERATOR = [{name: \"add\", symbol: \"+\"}, {name: \"subtract\", symbol: \"-\"}, {name: \"multiply\", symbol: \"*\"}, {name: \"divide\", symbol: \"/\"}];\n\nconst APP_LAYOUT = \"col-xs-10 col-xs-offset-1 col-md-4 col-md-offset-4 row\";\nconst DISPLAY_LAYOUT = \"col-xs-12 col-md-12 col-lg-12\";\nconst CLEANER_LAYOUT = \"col-xs-6 col-md-6 col-lg-6\";\nconst SINGLE_INPUT_LAYOUT = \"col-xs-3 col-md-3 col-lg-3\";\nconst SINGLE_OPERATOR_LAYOUT = \"col-xs-3 col-md-3 col-lg-3\";\n//const CALCULATE_LAYOUT = \"col-xs-12 col-md-12 col-lg-12\";\nconst ZERO_LAYOUT = \"col-xs-8 col-md-8 col-lg-8\";\nconst SUB_PART_INPUT_LAYOUT = \"col-xs-9 col-md-9 col-lg-9\";\nconst EQUALS_CONTAINER_LAYOUT = \"col-xs-3 col-md-3 col-lg-3\";\nconst SUB_PART_SINGLE_INPUT_LAYOUT = \"col-xs-4 col-md-4 col-lg-4\";\n\nconst BTN_STYLE = \"btn btn-default\";\n\n\nclass Display extends React.Component {\n  render() {\n    return (\n      <div id=\"display\" className={DISPLAY_LAYOUT}>\n        <p id=\"input\">{this.props.currentString}</p>\n        <p id=\"current\">{this.props.currentInput}</p>\n      </div>\n    );\n  }\n}\n\nclass SingleInput extends React.Component {\n  render() {\n    return (\n      <div id={this.props.userInputEng} className={this.props.styleSet}>\n        <button className={BTN_STYLE} onClick={this.props.handleInput}>{this.props.userInput}</button>\n      </div>\n    );\n  }\n}\n\n/* class Input extends React.Component {\n  render() {\n    return (\n      <div className={INPUT_LAYOUT}>\n        <SingleInput userInputEng={this.props.userInputEng[0]} userInput={this.props.userInput[0]}/>\n        <SingleInput userInputEng={this.props.userInputEng[1]} userInput={this.props.userInput[1]}/>\n        <SingleInput userInputEng={this.props.userInputEng[2]} userInput={this.props.userInput[2]}/>\n        <SingleInput userInputEng={this.props.userInputEng[3]} userInput={this.props.userInput[3]}/>\n        <SingleInput userInputEng={this.props.userInputEng[4]} userInput={this.props.userInput[4]}/>\n        <SingleInput userInputEng={this.props.userInputEng[5]} userInput={this.props.userInput[5]}/>\n        <SingleInput userInputEng={this.props.userInputEng[6]} userInput={this.props.userInput[6]}/>\n        <SingleInput userInputEng={this.props.userInputEng[7]} userInput={this.props.userInput[7]}/>\n        <SingleInput userInputEng={this.props.userInputEng[8]} userInput={this.props.userInput[8]}/>\n        <SingleInput userInputEng={this.props.userInputEng[9]} userInput={this.props.userInput[9]}/>\n        <Decimal decimalEng={this.props.userInputEng[10]} decimal={this.props.userInput[10]}/>\n      </div>\n    );\n  }\n} */\n\nclass SingleOperator extends React.Component {\n  render() {\n    return (\n      <div id={this.props.operator.name} className={this.props.styleSet}>\n        <button className={BTN_STYLE} onClick={this.props.handleInput}>{this.props.operator.symbol}</button>\n      </div>\n    );\n  }\n}\n\n/* class Operators extends React.Component {\n  render() {\n    return (\n      <div className={OPERATORS_LAYOUT}>\n        <SingleOperator operator={this.props.operators[0]} />\n        <SingleOperator operator={this.props.operators[1]} />\n        <SingleOperator operator={this.props.operators[2]} />\n        <SingleOperator operator={this.props.operators[3]} />\n      </div>\n    );\n  }\n} */\n\nclass Calculate extends React.Component {\n  render() {\n    return (\n      <div id=\"equals\" className={EQUALS_CONTAINER_LAYOUT}>\n        <button className={BTN_STYLE} onClick={this.props.handleCalculate}>=</button>\n      </div>\n    );\n  }\n}\n\nclass Cleaner extends React.Component {\n  render() {\n    return (\n      <div id=\"clear\" className={CLEANER_LAYOUT}>\n        <button className={BTN_STYLE} onClick={this.props.handleCleaner}>AC</button>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: INPUTS,\n      operators: OPERATOR,\n      currentInput: \"0\",\n      currentString: \"\",\n      result: \"\"\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleCalculate = this.handleCalculate.bind(this);\n    this.handleCleaner = this.handleCleaner.bind(this);\n  }\n\n  handleInput(event) {\n    //当前值为0时\n    if (this.state.currentInput === \"0\"){\n      //输入非小数点，则直接覆盖当前（显示）值\n      if (event.target.innerText !== INPUTS[10].symbol){\n        this.setState({\n          currentInput: event.target.innerText,\n          currentString: this.state.currentString.concat(event.target.innerText)\n        });\n      }else {\n        //输入小数点\n        this.setState({\n          currentInput: this.state.currentInput.concat(event.target.innerText)\n        });\n        //若计算式为空，则补0加小数点\n        if (this.state.currentString === \"\"){\n          this.setState({\n            currentString: this.state.currentString.concat(\"0\", event.target.innerText)\n          });\n        //若计算式不为空，即当前值为0的情况下，又按了一次0，导致计算式更新为0而非空，则把小数点连接到后面\n        }else {\n          this.setState({\n            currentString: this.state.currentString.concat(event.target.innerText)\n          });\n        }\n      }\n    //当前值为上次的计算结果时\n    }else if (this.state.currentInput === this.state.result){\n      //输入数字，则直接覆盖当前值和当前字符串\n      if ((/[0-9]/).test(event.target.innerText)){\n        this.setState({\n          currentInput: event.target.innerText,\n          currentString: event.target.innerText\n        });\n      //输入小数点，则直接以0.X的小数覆盖当前值和当前字符串\n      }else if(event.target.innerText === INPUTS[10].symbol){\n        this.setState({\n          currentInput: \"0\" + event.target.innerText,\n          currentString: \"0\" + event.target.innerText\n        });\n      //输入运算符，则把当前值覆盖为运算符，当前字符串则以上一次的计算结果开始继续运算\n      }else {\n        this.setState({\n          currentInput: event.target.innerText,\n          currentString: this.state.result.concat(event.target.innerText)\n        });\n      }\n    //当前值不为0时\n    }else {\n      //输入运算符，则覆盖当前显示值\n      if ((/[*/+-]/).test(event.target.innerText)) {\n        this.setState({\n          currentInput: event.target.innerText\n        });\n        //输入减号以外的运算符\n        if (event.target.innerText !== OPERATOR[1].symbol){\n          //若存储的计算式中最后输入位已经存在一个除减号以外的运算符或小数点，则替换最后的输入位，不能在计算式中连续记录运算符，小数点后无数字则直接替换为运算符\n          if ((/[*/+.]/).test(this.state.currentString[this.state.currentString.length - 1])) {\n            this.setState({\n              currentString: this.state.currentString.slice(0, this.state.currentString.length - 1).concat(event.target.innerText)\n            });\n          //若存储的计算式中的最后输入位是减号\n          }else if(this.state.currentString[this.state.currentString.length - 1] === OPERATOR[1].symbol){\n            //则再查看减号位的前一位，若该位是其他运算符，则把连续的运算符全部替换为用户最后输入的这个运算符\n            if ((/[*/+.]/).test(this.state.currentString[this.state.currentString.length - 2])){\n              this.setState({\n                currentString: this.state.currentString.slice(0, this.state.currentString.length - 2).concat(event.target.innerText)\n              });\n            //若该位不是运算符，则直接替换减号为用户最后输入的运算符\n            }else {\n              this.setState({\n                currentString: this.state.currentString.slice(0, this.state.currentString.length - 1).concat(event.target.innerText)\n              });\n            }\n          //若存储的计算式的最后输入位不是运算符，则直接连接记录\n          }else {\n            this.setState({\n              currentString: this.state.currentString.concat(event.target.innerText)\n            });\n          }\n        //输入减号\n        }else {\n          //若存储的计算式的最后输入位也是减号或小数点，则互相替换，不能连续记录减号，小数点后无数字则替换为运算符\n          if ((/[-.]/).test(this.state.currentString[this.state.currentString.length - 1])){\n            this.setState({\n              currentString: this.state.currentString.slice(0, this.state.currentString.length - 1).concat(event.target.innerText)\n            });\n          //若存储的计算式的最后输入位不是减号，则允许记录一次减号，作为负值\n          }else {\n            this.setState({\n              currentString: this.state.currentString.concat(event.target.innerText)\n            });\n          }\n        }\n      //输入非运算符\n      }else {\n        //输入数字\n        if (event.target.innerText !== INPUTS[10].symbol) {\n          //console.log(this.state.currentInput.indexOf(INPUTS[10]));\n          //当前值不是运算符，则连接数字\n          if ((/[0-9.]/).test(this.state.currentInput)){\n            this.setState({\n              currentInput: this.state.currentInput.concat(event.target.innerText),\n              currentString: this.state.currentString.concat(event.target.innerText)\n            });\n          //当前值是运算符，则覆盖为数字\n          }else {\n            this.setState({\n              currentInput: event.target.innerText,\n              currentString: this.state.currentString.concat(event.target.innerText)\n            });\n          }\n        //输入小数点，则仅在当前值不含小数点时添加进小数点\n        }else {\n          //console.log(this.state.currentInput.indexOf(INPUTS[10]));\n          if (this.state.currentInput.indexOf(INPUTS[10].symbol) === -1) {\n            //若当前值为非数字，则在小数点前补0并覆盖当前值\n            if ((/[^0-9]/).test(this.state.currentInput)){\n              this.setState({\n                currentInput: \"0\" + event.target.innerText,\n                currentString: this.state.currentString.concat(\"0\", event.target.innerText)\n              });\n            }else {\n              this.setState({\n                currentInput: this.state.currentInput.concat(event.target.innerText),\n                currentString: this.state.currentString.concat(event.target.innerText)\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  \n\n  handleCalculate(event){\n    //把输入的计算式，即当前字符串，拆分为单个字符的数组\n    let raw = this.state.currentString.split(\"\");\n    //把计算式中的“减号”替换为“加号负号”，但保留计算式中的负号；由此把计算式拆分为N个子表达式的和，每个子表达式不是单个数，就是仅含乘除的运算\n    for (let i = 0; i < raw.length; i++){\n      if (raw[i] === \"-\" && (/\\d/).test(raw[i - 1])){\n        raw[i] = \"+-\";\n      }\n    }\n    //把数组组合成N个子表达式的和，每个子表达式不是单个数，就是仅含乘除的运算\n    let newStr = raw.join(\"\");\n    //console.log(newStr);\n    let sumResult = 0;\n\n    //因为已经把计算式表达成和的计算，故用加号拆分成N个子表达式的数组\n    let newCal = newStr.split(\"+\");\n    for(let j = 0; j < newCal.length; j++){\n      //若该项为仅含乘除运算的子表达式\n      if (newCal[j].includes(\"/\") || newCal[j].includes(\"*\")) {\n        //以乘号、除号拆分出数字，即运算对象\n        let subNum = newCal[j].split(/[*/]/).map((item) => Number(item));\n        //console.log(subNum);\n        //把该子表达式的运算符（乘号、除号）全部提取出来\n        let cal = newCal[j].match(/[*/]/g);\n        //计算该子表达式的值\n        let mediaResult = subNum[0];\n        for (let n = 0; n < cal.length; n++) {\n          if (cal[n] === \"*\"){\n            mediaResult = mediaResult * subNum[n + 1];\n          }else {\n            mediaResult = mediaResult / subNum[n + 1];\n          }\n        }\n        //把该子表达式的值计入和中\n        sumResult += mediaResult;\n      //若该项为负数或正数，直接转换为数字后计入和中\n      }else {\n        sumResult += Number(newCal[j]);\n      }\n    }\n    //更新状态\n    this.setState({\n      result: sumResult.toString(),\n      currentInput: sumResult.toString(),\n      currentString: this.state.currentString.concat(\"=\", sumResult.toString())\n    });\n  }\n\n  handleCleaner() {\n    this.setState({\n      currentInput: \"0\",\n      currentString: \"\",\n      result: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div id=\"entire-app\" className={APP_LAYOUT}>\n          <Display currentInput={this.state.currentInput} currentString={this.state.currentString} />\n\n          <Cleaner handleCleaner={this.handleCleaner}/>\n          <SingleOperator styleSet={SINGLE_OPERATOR_LAYOUT} operator={this.state.operators[0]} handleInput={this.handleInput} />\n          <SingleOperator styleSet={SINGLE_OPERATOR_LAYOUT} operator={this.state.operators[1]} handleInput={this.handleInput} />\n\n          <SingleInput styleSet={SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[1].name} userInput={this.state.userInput[1].symbol} handleInput={this.handleInput} />\n          <SingleInput styleSet={SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[2].name} userInput={this.state.userInput[2].symbol} handleInput={this.handleInput} />\n          <SingleInput styleSet={SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[3].name} userInput={this.state.userInput[3].symbol} handleInput={this.handleInput} />\n          <SingleOperator styleSet={SINGLE_OPERATOR_LAYOUT} operator={this.state.operators[2]} handleInput={this.handleInput} />\n\n          <SingleInput styleSet={SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[4].name} userInput={this.state.userInput[4].symbol} handleInput={this.handleInput} />\n          <SingleInput styleSet={SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[5].name} userInput={this.state.userInput[5].symbol} handleInput={this.handleInput} />\n          <SingleInput styleSet={SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[6].name} userInput={this.state.userInput[6].symbol} handleInput={this.handleInput} />\n          <SingleOperator styleSet={SINGLE_OPERATOR_LAYOUT} operator={this.state.operators[3]} handleInput={this.handleInput} />\n\n          <div id=\"sub-part\" className=\"row\">\n            <div id=\"sub-part-input\" className={SUB_PART_INPUT_LAYOUT}>\n            <SingleInput styleSet={SUB_PART_SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[7].name} userInput={this.state.userInput[7].symbol} handleInput={this.handleInput} />\n            <SingleInput styleSet={SUB_PART_SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[8].name} userInput={this.state.userInput[8].symbol} handleInput={this.handleInput} />\n            <SingleInput styleSet={SUB_PART_SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[9].name} userInput={this.state.userInput[9].symbol} handleInput={this.handleInput} />\n            <SingleInput styleSet={ZERO_LAYOUT} userInputEng={this.state.userInput[0].name} userInput={this.state.userInput[0].symbol} handleInput={this.handleInput} />\n            <SingleInput styleSet={SUB_PART_SINGLE_INPUT_LAYOUT} userInputEng={this.state.userInput[10].name} userInput={this.state.userInput[10].symbol} handleInput={this.handleInput} />\n            </div>\n            <Calculate handleCalculate={this.handleCalculate} />\n          </div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}